{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Screen.svelte",
    "../../Disco.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Screen from './Screen.svelte';\n  import Disco from './Disco.svelte';\n\n  const black = '#000';\n  const white = '#fff';\n\n  const screens = [\n    [Screen, {\n      'img': \"bart_yellow.png\",\n      'text': \"This page intentionally left Bart.\",\n      'textColor': black,\n      'bgColor': white,\n    }],\n    [Screen, {\n      'img': \"bart_yellow.png\",\n      'text': \"This page intentionally left black.\",\n      'textColor': white,\n      'bgColor': black,\n    }],\n    [Screen, {\n      'img': \"bart_blue.png\",\n      'text': \"This page intentionally left dank.\",\n      'textColor': white,\n      'bgColor': black,\n    }],\n    [Disco, {\n      'textColor': white,\n    }],\n  ];\n\n  // Change the screen every num milliseconds\n  let indexOn = 0;\n  setInterval(() => {\n    indexOn = (indexOn === screens.length - 1) ? 0 : indexOn + 1;\n  }, 1250);\n</script>\n\n\n<!-- TODO: add footer link to github -->\n<div class=\"content\">\n  <div>\n    {#each screens as [screen, props], i}\n      <svelte:component this={screen} {props} isVisible=\"{i === indexOn}\" />\n    {/each}\n\n    <div class=\"projects\">\n      <h2>Projects</h2>\n      <ul class=\"links\">\n        <li>\n          <a href=\"https://my-spotify-canvas.now.sh\" alt=\"My Spotify Canvas\">\n            <b>My Spotify Canvas</b> - <small>dynamically updated audio video canvas of my recently played Spotify music</small>\n          </a>\n        </li>\n        <li>\n          <a href=\"https://spotify-play-history.now.sh\" alt=\"Spotify Play History\">\n            <b>Spotify Play History</b> - <small>see your recently played Spotify songs on mobile</small>\n          </a>\n        </li>\n      </ul>\n    </div>\n\n  </div>\n</div>\n\n<style>\n  .content {\n    text-align: center;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .page-text {\n    color: var(--text-color);\n  }\n  .projects {\n    margin-top: 50px;\n    background: rgba(0, 0, 0, 0.7);\n    /*background-color: #2a2c37; /* grey */\n  }\n  .projects h2 {\n    color: white;\n    padding-top: 10px;\n  }\n  .links {\n    list-style-type: none;\n    padding-inline-start: 0px;\n    font-size: 1.2em;\n  }\n  .links li {\n    padding: 8px;\n  }\n  .links li:nth-child(1) a {\n    color: #FB65B2;  /* pink */\n  }\n  .links li:nth-child(2) a {\n    color: #72FFE4; /* blue */\n  }\n  .links li:nth-child(3) a {\n    color: #4AFF68; /* green */\n  }\n  .links li:nth-child(4) a {\n    color: #FEFF6E; /* yellow */\n  }\n</style>\n",
    "<script>\n  export let props, isVisible;\n  const { img, text, textColor, bgColor } = props;\n\n  $: if (isVisible && bgColor)  {\n    document.body.style.backgroundColor = bgColor;\n  }\n\n  let display = 'none';\n  $: display = isVisible ? 'block' : 'none';\n</script>\n\n<div style=\"display: {display}\">\n  {#if img}<img src={img} alt={img}>{/if}\n  {#if text}<h1 class=\"text-color\" style=\"--text-color: {textColor}\">{text}</h1>{/if}\n</div>\n\n<style>\n  .text-color {\n    color: var(--text-color);\n  }\n</style>\n",
    "<script>\n  import { onDestroy } from 'svelte';\n  export let props, isVisible;\n  let { img, text, textColor, bgColor } = props;\n\n  if (!img) img = 'bart_yellow.png';\n  if (!text) text = 'This page intentionally left disco.';\n  if (!textColor) textColor = '#000';\n  if (!bgColor) bgColor = '#fff';\n\n  $: if (isVisible && bgColor)  {\n    document.body.style.backgroundColor = bgColor;\n  }\n\n  let display = 'none';\n  $: display = isVisible ? 'block' : 'none';\n\n  let discoInterval = null;\n  onDestroy(() => {\n    clearInterval(discoInterval);\n  });\n\n  $: if (isVisible) {\n    discoInterval = setInterval(setDivsRandomColor, 250);\n  } else {\n    clearInterval(discoInterval);\n  }\n\n  function setDivsRandomColor() {\n    let discoDivs = document.getElementsByClassName('disco');\n    for (const div of discoDivs) {\n      div.style.background = randomColor();\n    }\n  }\n\n  function randomColor() {\n    return `rgb(${Math.floor(Math.random() * 256)},\n                ${Math.floor(Math.random() * 256)},\n                ${Math.floor(Math.random() * 256)})`;\n  }\n</script>\n\n<div style=\"display: {display}\">\n  {#if img}<img src={img} alt={img}>{/if}\n  {#if text}<h1 class=\"text-color\" style=\"--text-color: {textColor}\">{text}</h1>{/if}\n  {#each [0, 1, 2, 3, 4] as _, i}\n    {#each [0, 1, 2, 3, 4] as _, j}\n      <div class=\"disco\" style=\"top: {i * 20}%; left: {j * 20}%; background: {randomColor()};\" />\n    {/each}\n  {/each}\n</div>\n\n<style>\n  .text-color {\n    color: var(--text-color);\n  }\n  .disco {\n    position: absolute;\n    z-index: -1;\n    width: 20%;\n    height: 20%;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAkEE,QAAQ,4BAAC,CAAC,AACR,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC,AAID,SAAS,4BAAC,CAAC,AACT,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAEhC,CAAC,AACD,uBAAS,CAAC,EAAE,cAAC,CAAC,AACZ,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,eAAe,CAAE,IAAI,CACrB,oBAAoB,CAAE,GAAG,CACzB,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,oBAAM,CAAC,EAAE,cAAC,CAAC,AACT,OAAO,CAAE,GAAG,AACd,CAAC,AACD,oBAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,cAAC,CAAC,AACxB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,oBAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,cAAC,CAAC,AACxB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,oBAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,cAAC,CAAC,AACxB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,oBAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,cAAC,CAAC,AACxB,KAAK,CAAE,OAAO,AAChB,CAAC;ACtFD,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,IAAI,YAAY,CAAC,AAC1B,CAAC;ACiCD,WAAW,cAAC,CAAC,AACX,KAAK,CAAE,IAAI,YAAY,CAAC,AAC1B,CAAC,AACD,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,CACX,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC"
}